[["index.html", "3D’omics | Swine protein deposition trial Manuscript in prep Chapter 1 Introduction 1.1 Prepare the R environment", " 3D’omics | Swine protein deposition trial Manuscript in prep Antton Alberdi1 2024-06-13 Chapter 1 Introduction This webbook contains all the code used for the study on the effect of probiotics on Salmonella infection in broiler chicken. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/3d-omics/AMAC005_salmonella_trial.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(broom) library(broom.mixed) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(ANCOMBC) library(lme4) library(Hmsc) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Filter and normalise data 2.2 Color scheme 2.3 Wrap working objects", " Chapter 2 Data preparation 2.0.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/sample_metadata.tsv&quot;) 2.0.2 Genome metadata Relevant metadata of genomes is fetched from 2-3 files and merged into one genome metadata object for downstream analyses. 2.0.2.1 Taxonomy This is the raw taxonomy table generated by GTDBtk, which is simplified for downstream analyses. genome_taxonomy &lt;- bind_rows(read_tsv(&quot;data/gtdbtk.bac120.summary.tsv&quot;), read_tsv(&quot;data/gtdbtk.ar53.summary.tsv&quot;)) %&gt;% rename(genome = user_genome) %&gt;% mutate(genome = str_replace_all(genome,&quot;\\\\.fa&quot;, &quot;&quot;)) %&gt;% separate(classification, c(&quot;domain&quot;,&quot;phylum&quot;,&quot;class&quot;,&quot;order&quot;,&quot;family&quot;,&quot;genus&quot;,&quot;species&quot;), sep =&quot;;&quot;) %&gt;% select(genome,domain,phylum,class,order,family,genus,species) %&gt;% arrange(match(genome, read_counts$genome)) 2.0.2.2 Genome quality Quality properties of the genomes. Derived from dREP’s Widb table. genome_quality &lt;- read_csv(&quot;data/genome_quality.csv&quot;) %&gt;% rename(genome = 1) %&gt;% arrange(match(genome, read_counts$genome)) %&gt;% select(genome, completeness, contamination, size) %&gt;% rename(length=size) %&gt;% mutate(genome = str_remove(genome, &quot;\\\\.fa$&quot;)) 2.0.2.3 Merged metadata object Merge taxonomy, length and quality information genome_metadata &lt;- genome_taxonomy %&gt;% left_join(genome_quality,by=&quot;genome&quot;) #join quality 2.0.3 Count table This is the document containing the number of sequencing reads from each sample have been mapped to each MAG. Note that this is the raw data that needs to be further processed before running any statistics on them. read_counts &lt;- read_tsv(&quot;data/genome_count.tsv.gz&quot;) %&gt;% rename_all(~ str_remove_all(., &quot;.lib1&quot;)) %&gt;% #simplify column names rename(genome = 1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.0.4 Base hit table This is the document containing the number of nucleotide bases have been covered by at least one read in each sample and MAG. This information is used to calculate MAG coverage values. basehits &lt;- read_tsv(&quot;data/genome_covered_bases.tsv.gz&quot;) %&gt;% rename_all(~ str_remove_all(., &quot;.lib1&quot;)) %&gt;% #simplify column names rename(genome = 1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.0.5 Genome tree This is the raw tree generated by GTDBtk, which needs to be pruned to obtain the phylogenetic tree of the genomes. Note that the archaeal tree is only generated if any archaeans are detected among the genomes. archaea_tree &lt;- read.tree(&quot;data/gtdbtk.ar53.classify.tree&quot;) #note that when no archaea are detected, this tree is not generated bacteria_tree &lt;- read.tree(&quot;data/gtdbtk.backbone.bac120.classify.tree&quot;) genome_tree &lt;- bind.tree(archaea_tree, bacteria_tree) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.0.6 MAG functional annotations This is the raw annotation table generated by DRAM, which is used to generate GIFT data using distillR. genome_annotations &lt;- read_tsv(&quot;data/genome_annotations.tsv.xz&quot;) %&gt;% rename(gene=1,genome=2) 2.1 Filter and normalise data Raw data needs to be filtered and normalised to make it useful for downstream analyses. 2.1.1 Generate coverage table By dividing the number of base hits by the length of each genome, coverage values can be calculated. genome_coverage &lt;- basehits %&gt;% mutate(across(where(is.numeric), ~ ./genome_metadata$length)) 2.1.2 Coverage filtering Genomes that have less than 30% of their length covered by reads are turned into zeros to account for the random allocation of reads across genomes due to mapping heuristics. min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.1.3 Generate genome count table After filtering the low-coverage reads, read counts are transformed into genome counts using genome-length and read-length information. readlength=150 #change if sequencing read length is different genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.1.4 Distil functional annotations Raw functional annotations are distilled into genome-inferred functional traits to generate biologically more meaningful functional traits for downstream analyses. genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19),verbosity=F) 2.2 Color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.3 Wrap working objects In the last step, the objects that are needed for downstream analyses are stored in an R object. save(read_counts, read_counts_filt, genome_counts, genome_counts_filt, genome_tree, genome_metadata, genome_gifts, sample_metadata, phylum_colors, file = &quot;data/data.Rdata&quot;) read_counts: Number of reads mapped to each genome in each sample. Note this is the unfiltered and unnormalised raw community composition table. genome_counts: Number of genomes quantified in each sample, calculated through filtering and normalising read_counts. This is the community composition table to be used in downstream analyses unless otherwise stated. genome_tree: Phylogenetic tree of the genomes, to be employed in downstream phylogenetic analyses. genome_metadata: Taxonomic and quality information of the genomes. genome_gifts: Genome-inferred functional traits of the genomes, to be employed in downstream functional analyses. sample_metadata: Treatment/population and other relevant metadata of the samples. "],["mag-catalogue.html", "Chapter 3 MAG catalogue 3.1 Genome phylogeny 3.2 Genome quality 3.3 Functional overview 3.4 Functional ordination", " Chapter 3 MAG catalogue load(&quot;data/data.Rdata&quot;) 3.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 3.2 Genome quality tibble(Completeness= paste0(round(genome_metadata$completeness %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$completeness %&gt;% sd(),2)), Contamination= paste0(round(genome_metadata$contamination %&gt;% mean(),2), &quot;±&quot;, round(genome_metadata$contamination %&gt;% sd(),2))) %&gt;% tt() tinytable_ptfabd24mfk5q63ql2lr .table td.tinytable_css_mwk066epno77vtp7im2i, .table th.tinytable_css_mwk066epno77vtp7im2i { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 83.77±12.14 3.85±4.47 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + xlim(c(50,100)) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 3.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 3.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["community-composition.html", "Chapter 4 Community composition 4.1 Taxonomy overview 4.2 Taxonomy boxplot", " Chapter 4 Community composition load(&quot;data/data.Rdata&quot;) 4.1 Taxonomy overview 4.1.1 Stacked barplot genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(count &gt; 0) %&gt;% #filter 0 counts ggplot(., aes(x=sample,y=count, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + facet_nested(. ~ treatment + trial, scales=&quot;free&quot;) + #facet per day and treatment guides(fill = guide_legend(ncol = 1)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;)) + labs(fill=&quot;Phylum&quot;,y = &quot;Relative abundance&quot;,x=&quot;Samples&quot;) ### Phylum relative abundances phylum_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% group_by(sample,phylum) %&gt;% summarise(relabun=sum(count)) phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_8hnwj52vntxyre8usp6d .table td.tinytable_css_2gcobq90axemzdyppp98, .table th.tinytable_css_2gcobq90axemzdyppp98 { border-bottom: solid 0.1em #d3d8dc; } phylum mean sd p__Bacteroidota 0.5429264135 0.0839814443 p__Bacillota_A 0.2053118388 0.0504873476 p__Bacillota 0.0820882796 0.0332609240 p__Bacillota_C 0.0492489327 0.0142741661 p__Spirochaetota 0.0482278851 0.0467236412 p__Cyanobacteriota 0.0310050620 0.0165287926 p__Pseudomonadota 0.0172699714 0.0170094305 p__Campylobacterota 0.0162452268 0.0388594354 p__Patescibacteria 0.0022213343 0.0014395316 p__Thermoplasmatota 0.0019390776 0.0018321268 p__Verrucomicrobiota 0.0010490684 0.0022355045 p__Bacillota_B 0.0010095801 0.0006944021 p__Elusimicrobiota 0.0007469834 0.0010942911 p__Fibrobacterota 0.0007103462 0.0011143593 phylum_arrange &lt;- phylum_summary %&gt;% group_by(phylum) %&gt;% summarise(mean=mean(relabun)) %&gt;% arrange(-mean) %&gt;% select(phylum) %&gt;% pull() phylum_summary %&gt;% filter(phylum %in% phylum_arrange) %&gt;% mutate(phylum=factor(phylum,levels=rev(phylum_arrange))) %&gt;% ggplot(aes(x=relabun, y=phylum, group=phylum, color=phylum)) + scale_color_manual(values=phylum_colors[rev(phylum_arrange)]) + geom_jitter(alpha=0.5) + theme_minimal() + theme(legend.position=&quot;none&quot;) + labs(y=&quot;Phylum&quot;,x=&quot;Relative abundance&quot;) 4.2 Taxonomy boxplot 4.2.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) %&gt;% tt() tinytable_n2pcb534i9j2b9ydfeb8 .table td.tinytable_css_or5gfdjlrtl1p298rtfw, .table th.tinytable_css_or5gfdjlrtl1p298rtfw { border-bottom: solid 0.1em #d3d8dc; } family mean sd f__Bacteroidaceae 0.4700966396 0.1019283906 f__Lachnospiraceae 0.1171338702 0.0452596418 f__Treponemataceae 0.0408387686 0.0440444319 f__Gastranaerophilaceae 0.0296035799 0.0160991852 f__Selenomonadaceae 0.0289746313 0.0095722337 f__Oscillospiraceae 0.0259606214 0.0106720994 f__UBA660 0.0256112036 0.0182125645 f__UBA932 0.0230420425 0.0092838271 f__Ruminococcaceae 0.0180292427 0.0088616619 f__Muribaculaceae 0.0178740843 0.0071982538 f__Acidaminococcaceae 0.0167462889 0.0052414082 f__Campylobacteraceae 0.0159838256 0.0387975785 f__Paludibacteraceae 0.0158802598 0.0125214151 f__Clostridiaceae 0.0142082983 0.0159927811 f__Lactobacillaceae 0.0120870093 0.0141122636 f__Streptococcaceae 0.0119333963 0.0179222778 f__Erysipelotrichaceae 0.0108128987 0.0042497143 f__CAG-508 0.0099733313 0.0062656103 f__Acutalibacteraceae 0.0096833683 0.0060436186 f__UBA3663 0.0094777979 0.0192819112 f__Sphaerochaetaceae 0.0073891166 0.0060831038 f__Mycoplasmoidaceae 0.0057277193 0.0127545402 f__CAG-239 0.0057140284 0.0089502266 f__CAG-826 0.0055560044 0.0028667268 f__Peptostreptococcaceae 0.0049109397 0.0032085173 f__Tannerellaceae 0.0046155985 0.0026566511 f__CAG-288 0.0040602534 0.0021145362 f__Rhodocyclaceae 0.0038788761 0.0130720725 f__Anaeroplasmataceae 0.0030394443 0.0025945089 f__Nanosyncoccaceae 0.0022213343 0.0014395316 f__Succinivibrionaceae 0.0020045919 0.0024676663 f__Methanomethylophilaceae 0.0019390776 0.0018321268 f__Dialisteraceae 0.0017391230 0.0032952488 f__Butyricicoccaceae 0.0017234941 0.0021195229 f__CAG-449 0.0016810036 0.0013345102 f__Pasteurellaceae 0.0015456101 0.0047318494 f__CAG-465 0.0014721087 0.0026676970 f__Megasphaeraceae 0.0014360764 0.0023501498 f__RUG14156 0.0014014821 0.0014210129 f__UBA1997 0.0013531597 0.0023910775 f__Enterobacteriaceae 0.0013411897 0.0024260041 f__Burkholderiaceae_A 0.0012406314 0.0006951609 f__Amoebophilaceae 0.0011667118 0.0023198792 f__Turicibacteraceae 0.0011425956 0.0007583924 f__Peptococcaceae 0.0010095801 0.0006944021 f__Elusimicrobiaceae 0.0007469834 0.0010942911 f__UBA1067 0.0007204041 0.0016219643 f__Fibrobacteraceae 0.0007103462 0.0011143593 f__Cellulosilyticaceae 0.0005937404 0.0009420951 f__UBA3700 0.0005041373 0.0008110409 f__W3P20-009 0.0004944734 0.0006907562 f__Borkfalkiaceae 0.0003881408 0.0010875597 f__Anaerovoracaceae 0.0003775136 0.0007742000 f__Veillonellaceae 0.0003528131 0.0009774385 f__Akkermansiaceae 0.0003286643 0.0011129928 f__P3 0.0002788056 0.0009614512 f__Helicobacteraceae 0.0002614012 0.0005556899 f__Metamycoplasmataceae 0.0002189170 0.0007439893 f__Coprobacillaceae 0.0002178342 0.0005422852 f__CAG-272 0.0002069501 0.0008766710 f__Rs-D84 0.0001918840 0.0007168920 f__UBA1381 0.0001460821 0.0004690733 family_arrange &lt;- family_summary %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% pull() # Per treatment family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum)) + scale_color_manual(values=phylum_colors[-8]) + geom_jitter(alpha=0.5) + facet_grid(.~treatment)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) 4.2.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,phylum,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) genus_summary_sort &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun, na.rm=T),sd=sd(relabun, na.rm=T)) %&gt;% arrange(-mean) genus_summary_sort %&gt;% tt() tinytable_xzwicfw3ok05a5vc30i3 .table td.tinytable_css_whq40atzl6l92cumg3tt, .table th.tinytable_css_whq40atzl6l92cumg3tt { border-bottom: solid 0.1em #d3d8dc; } genus mean sd Prevotella 3.954166e-01 0.1038048308 Alloprevotella 4.821648e-02 0.0124460045 Treponema_D 4.083877e-02 0.0440444319 Agathobacter 3.516244e-02 0.0159828646 Faecousia 2.290556e-02 0.0102662784 Cryptobacteroides 2.272817e-02 0.0089460479 UBA4372 2.001823e-02 0.0110629331 Phascolarctobacterium_A 1.674629e-02 0.0052414082 Campylobacter 1.598383e-02 0.0387975785 Anaerovibrio 1.522639e-02 0.0065468666 RF16 1.511332e-02 0.0119538706 Clostridium 1.420830e-02 0.0159927811 W0P33-017 1.386459e-02 0.0094151963 CAMCDL01 1.374824e-02 0.0079563270 Streptococcus 1.193340e-02 0.0179222778 CAG-196 1.114276e-02 0.0072720243 UBA3663 9.477798e-03 0.0192819112 Lactobacillus 9.124798e-03 0.0103996217 COE1 8.670377e-03 0.0048120303 Lachnospira 7.757836e-03 0.0044411339 Faecalibacterium 7.403613e-03 0.0063485771 Sodaliphilus 6.259893e-03 0.0023821713 UBA636 6.053954e-03 0.0028821164 Malacoplasma_A 5.727719e-03 0.0127545402 Eubacterium_R 5.688683e-03 0.0048884676 UBA2883 5.630682e-03 0.0043630677 Gemmiger 5.545737e-03 0.0036125674 UBA2868 5.302298e-03 0.0075776580 CAG-605 5.103081e-03 0.0085460034 Parabacteroides 4.615599e-03 0.0026566511 UBA2882 4.556332e-03 0.0078575078 CAJGDV01 4.375272e-03 0.0073946242 SFTJ01 4.357617e-03 0.0031853723 Ornithospirochaeta 4.318767e-03 0.0026875413 Zag111 4.278245e-03 0.0037356591 Terrisporobacter 4.102349e-03 0.0027507957 UMGS1585 3.909555e-03 0.0023016276 SFHR01 3.878876e-03 0.0130720725 CAG-533 3.865377e-03 0.0034100580 Acetatifactor 3.325740e-03 0.0017960296 Onthovivens 3.112364e-03 0.0017978526 Bullifex 3.070349e-03 0.0040188810 Limosilactobacillus 2.962211e-03 0.0040683220 Bulleidia 2.891049e-03 0.0017439113 RUG410 2.854305e-03 0.0030288505 CAG-269 2.829172e-03 0.0024341894 Enterosoma 2.799082e-03 0.0019378803 UBA1221 2.726159e-03 0.0032665396 CAJOJO01 2.608791e-03 0.0120258428 UBA4334 2.524620e-03 0.0021396414 CAG-303 2.357897e-03 0.0024696723 Scatovivens 2.253934e-03 0.0021034110 CAG-485 2.245221e-03 0.0022921856 UBA2834 2.221334e-03 0.0014395316 Butyribacter 2.193939e-03 0.0023715379 UBA11957 2.137090e-03 0.0014526629 Wujia 2.062705e-03 0.0017014595 Succinivibrio 2.004592e-03 0.0024676663 CAG-267 1.985271e-03 0.0069597286 Anaeroplasma 1.970164e-03 0.0020442006 Fimenecus 1.925273e-03 0.0015984100 Limisoma 1.893799e-03 0.0012512398 Roseburia 1.891055e-03 0.0019178824 Onthousia 1.780553e-03 0.0016792228 Oliverpabstia 1.764149e-03 0.0016499416 UBA1712 1.739674e-03 0.0017911848 Dialister 1.739123e-03 0.0032952488 UBA3210 1.681004e-03 0.0013345102 UBA6382 1.668529e-03 0.0015786673 1XD8-76 1.647968e-03 0.0009404726 Dysosmobacter 1.636559e-03 0.0006376329 CAG-582 1.619036e-03 0.0023101109 UBA3789 1.554678e-03 0.0021954852 UBA71 1.539428e-03 0.0016045421 CAG-452 1.504396e-03 0.0014926048 CAG-465 1.472109e-03 0.0026676970 Megasphaera 1.436076e-03 0.0023501498 CAG-95 1.397961e-03 0.0010793714 Pararoseburia 1.370697e-03 0.0012356294 Stercorousia 1.351763e-03 0.0019389629 Escherichia 1.341190e-03 0.0024260041 RUG14156 1.320438e-03 0.0012877631 HGM13634 1.287840e-03 0.0015722660 HGM10890 1.261172e-03 0.0008205742 Sutterella 1.240631e-03 0.0006951609 Blautia_A 1.187043e-03 0.0016384301 Oribacterium 1.143520e-03 0.0011593782 Turicibacter 1.142596e-03 0.0007583924 Phocaeicola 1.124783e-03 0.0015425034 CAG-873 1.121972e-03 0.0014125215 CAG-882 1.119737e-03 0.0015619435 Coprococcus_A 1.090054e-03 0.0010674014 CAG-307 1.069280e-03 0.0009607836 RUG115 1.050968e-03 0.0014226574 Ventrimonas 1.025837e-03 0.0026445007 CAG-194 9.877873e-04 0.0011572030 RGIG3102 9.708819e-04 0.0004929237 Enteromonas 9.659928e-04 0.0007463490 CAG-245 9.031702e-04 0.0010680329 Butyricicoccus_A 8.674245e-04 0.0010970992 Agathobaculum 8.560696e-04 0.0017107271 CAG-590 8.339065e-04 0.0020798200 Basfia_A 8.158406e-04 0.0025857850 Romboutsia 8.085906e-04 0.0005738447 CALZFJ01 7.973847e-04 0.0005977457 CALZKI01 7.643313e-04 0.0009697478 MGBC100174 7.579825e-04 0.0014812246 UBA1436 7.469834e-04 0.0010942911 Actinobacillus_A 7.297695e-04 0.0029938658 CAG-632 7.195232e-04 0.0014437470 Aphodocola 6.951033e-04 0.0007698976 Ruminococcus_E 6.922093e-04 0.0008334298 Blautia 6.863243e-04 0.0008814138 CAG-1000 6.658396e-04 0.0011250480 UBA3207 6.566213e-04 0.0008392876 MGBC108787 6.111432e-04 0.0008075631 Clostridium_Q 6.109169e-04 0.0004432668 CAG-115 6.102927e-04 0.0014104650 JALEVB01 6.085658e-04 0.0004062303 Cellulosilyticum 5.937404e-04 0.0009420951 UBA7185 5.890955e-04 0.0005426874 Holdemanella 5.881670e-04 0.0005929724 CALXSC01 5.868139e-04 0.0013578825 Mediterranea 5.783514e-04 0.0009685560 Bariatricus 5.678290e-04 0.0004912286 Scatousia 5.644188e-04 0.0008769630 VSOB01 5.599855e-04 0.0006888622 JALFVM01 5.507130e-04 0.0006101708 RGIG9287 5.465083e-04 0.0024433056 SIG333 5.445884e-04 0.0009002716 CAG-45 5.338278e-04 0.0008164413 HGM13010 5.258450e-04 0.0004502508 Limivicinus 5.253983e-04 0.0005487623 SFRY01 5.246062e-04 0.0004813940 SFJ001 5.180974e-04 0.0003930913 Hallerella 5.172076e-04 0.0008613899 CAG-826 5.170304e-04 0.0008743808 SFIE01 5.169742e-04 0.0005550785 RUG11198 5.127886e-04 0.0008351012 UBA3700 5.041373e-04 0.0008110409 W3P20-009 4.944734e-04 0.0006907562 UMGS363 4.929590e-04 0.0012273398 UMGS1491 4.858508e-04 0.0005399772 Aphodosoma 4.779456e-04 0.0013579188 Choladocola 4.738155e-04 0.0004342450 Scatocola 4.604184e-04 0.0010371059 Ruminococcus 4.445026e-04 0.0006919929 UBA3282 4.438616e-04 0.0005083950 UMGS1994 4.344562e-04 0.0007934213 UMGS1590 4.204847e-04 0.0004036875 RUG705 4.195280e-04 0.0007771757 UBA7173 4.100424e-04 0.0005561943 UBA1783 4.099466e-04 0.0005640421 Ruminococcus_C 4.056678e-04 0.0004844254 Methanomethylophilus 3.996493e-04 0.0004802023 UBA1067 3.983207e-04 0.0009244905 CAG-238 3.775136e-04 0.0007742000 Bacteroides_F 3.759222e-04 0.0006304753 RUG14891 3.696802e-04 0.0008003112 JAHHSE01 3.672573e-04 0.0011485065 CAG-877 3.558107e-04 0.0007632094 Fusicatenibacter 3.544812e-04 0.0006932089 CAMBIX01 3.528131e-04 0.0009774385 CALVUP01 3.510109e-04 0.0004922037 UBA7050 3.420853e-04 0.0004308404 Ruminiclostridium_E 3.410333e-04 0.0008951955 UMGS1668 3.388053e-04 0.0005266594 Akkermansia 3.286643e-04 0.0011129928 RUG572 3.220834e-04 0.0007503658 Merdicola 3.141435e-04 0.0006916879 Egerieousia 3.138723e-04 0.0006309551 UBA4951 3.039960e-04 0.0004628059 UBA6398 3.003435e-04 0.0005128175 W0P28-013 2.889906e-04 0.0013727816 MGBC120314 2.861871e-04 0.0006231744 CAKOTZ01 2.857955e-04 0.0004180249 Onthomorpha 2.788056e-04 0.0009614512 W0P31-042 2.635487e-04 0.0003389963 CAG-302 2.621592e-04 0.0006045524 Helicobacter_D 2.614012e-04 0.0005556899 Floccifex 2.612166e-04 0.0003383941 JAHHTP01 2.592354e-04 0.0002896173 NK4A136 2.416155e-04 0.0010312163 CAZU01 2.408714e-04 0.0005713470 Butyrivibrio_A 2.279423e-04 0.0003667137 Copromonas 2.255607e-04 0.0003928410 UBA710 2.189170e-04 0.0007439893 Catenibacterium 2.178342e-04 0.0005422852 SIG301 2.025205e-04 0.0004021773 Fibrobacter 1.931386e-04 0.0007993952 Enterousia 1.918840e-04 0.0007168920 HUN007 1.814426e-04 0.0005192063 Ventrenecus 1.734925e-04 0.0004976721 CAKQTH01 1.731625e-04 0.0004666181 Marvinbryantia 1.649863e-04 0.0003614440 Eubacterium_F 1.637006e-04 0.0003477185 UMGS1663 1.604242e-04 0.0005928074 OMSK01 1.512188e-04 0.0007063771 JALEPO01 1.460821e-04 0.0004690733 Coprococcus 1.392515e-04 0.0002761491 Scybalousia 1.366405e-04 0.0007230946 Fimousia 1.197481e-04 0.0006118080 CAG-557 1.179812e-04 0.0007325510 Clostridium_AI 1.070752e-04 0.0007418386 RGIG1934 8.794057e-05 0.0002976833 Galligastranaerophilus_A 8.104457e-05 0.0003930025 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() #Per treatment genus_summary %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus=factor(genus, levels=rev(genus_summary_sort %&gt;% pull(genus)))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + geom_jitter(alpha=0.5) + facet_grid(.~treatment)+ theme_minimal() + labs(y=&quot;Family&quot;, x=&quot;Relative abundance&quot;, color=&quot;Phylum&quot;) "],["alpha-diversity.html", "Chapter 5 Alpha diversity", " Chapter 5 Alpha diversity load(&quot;data/data.Rdata&quot;) # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Aggregate basal GIFT into elements dist &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) %&gt;% traits2dist(., method = &quot;gower&quot;) functional &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, dist = dist) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(functional = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) %&gt;% mutate(functional = if_else(is.nan(functional), 1, functional)) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) %&gt;% full_join(functional, by = join_by(sample == sample)) #Richness alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(treatment != &quot;T0&quot;) %&gt;% filter(metric==&quot;richness&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ trial, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Neutral alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(treatment != &quot;T0&quot;) %&gt;% filter(metric==&quot;neutral&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ trial, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Phylogenetic alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(treatment != &quot;T0&quot;) %&gt;% filter(metric==&quot;phylogenetic&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ trial, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) #Functional alpha_div %&gt;% pivot_longer(-sample, names_to = &quot;metric&quot;, values_to = &quot;value&quot;) %&gt;% left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% filter(treatment != &quot;T0&quot;) %&gt;% filter(metric==&quot;functional&quot;) %&gt;% ggplot(aes(y = value, x = treatment, group=treatment, color=treatment, fill=treatment)) + geom_boxplot(outlier.shape = NA) + geom_jitter(alpha=0.5) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + facet_wrap(. ~ trial, scales = &quot;fixed&quot;, ncol=5) + coord_cartesian(xlim = c(1, NA)) + theme_classic() + theme( strip.background = element_blank(), panel.grid.minor.x = element_line(size = .1, color = &quot;grey&quot;), axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(angle = 45, hjust = 1) ) "],["beta-diversity.html", "Chapter 6 Beta diversity", " Chapter 6 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) beta_q1p &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) beta_q1f &lt;- genome_counts_filt %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, dist = dist) 6.0.1 Richness diversity plot beta_q0n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(treatment,trial) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% filter(treatment != &quot;T0&quot;) %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = treatment, fill = treatment, shape = trial)) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 6.0.2 Neutral diversity plot beta_q1n$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(treatment,trial) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% filter(treatment != &quot;T0&quot;) %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = treatment, fill = treatment, shape = trial)) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 6.0.3 Phylogenetic diversity plot beta_q1p$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(treatment,trial) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% filter(treatment != &quot;T0&quot;) %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = treatment, fill = treatment, shape = trial)) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) 6.0.4 Functional diversity plot beta_q1f$S %&gt;% vegan::metaMDS(., trymax = 500, k = 2, trace=0) %&gt;% vegan::scores() %&gt;% as_tibble(., rownames = &quot;sample&quot;) %&gt;% dplyr::left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% group_by(treatment,trial) %&gt;% mutate(x_cen = mean(NMDS1, na.rm = TRUE)) %&gt;% mutate(y_cen = mean(NMDS2, na.rm = TRUE)) %&gt;% ungroup() %&gt;% filter(treatment != &quot;T0&quot;) %&gt;% ggplot(aes(x = NMDS1, y = NMDS2, color = treatment, fill = treatment, shape = trial)) + scale_color_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC3&quot;,&quot;#AFD699&quot;)) + scale_fill_manual(name=&quot;Treatment&quot;, breaks=c(&quot;T1&quot;,&quot;T3&quot;), values=c(&quot;#6A9AC350&quot;,&quot;#AFD69950&quot;)) + geom_point(size = 4) + # stat_ellipse(aes(color = beta_q1n_nmds$Groups))+ geom_segment(aes(x = x_cen, y = y_cen, xend = NMDS1, yend = NMDS2), alpha = 0.9) + theme_classic() + theme( axis.text.x = element_text(size = 12), axis.text.y = element_text(size = 12), axis.title = element_text(size = 20, face = &quot;bold&quot;), axis.text = element_text(face = &quot;bold&quot;, size = 18), panel.background = element_blank(), axis.line = element_line(size = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.text = element_text(size = 16), legend.title = element_text(size = 18), legend.position = &quot;right&quot;, legend.box = &quot;vertical&quot; ) + labs(shape=&quot;Individual&quot;) "],["pacbio-selection.html", "Chapter 7 PacBio selection 7.1 Read fraction 7.2 Phylogenetic diversity 7.3 TOP10 candidate samples", " Chapter 7 PacBio selection load(&quot;data/data.Rdata&quot;) 7.1 Read fraction microbial_fraction &lt;- read_tsv(&quot;data/microbial_fraction.tsv&quot;) %&gt;% mutate(sample=str_replace_all(sample,&quot;\\\\.lib1_1&quot;, &quot;&quot;)) %&gt;% mutate(read_fraction=str_remove(read_fraction,&quot;%&quot;) %&gt;% as.numeric()) 7.2 Phylogenetic diversity phylogenetic_diversity &lt;- genome_counts %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% select(where(~!all(. == 0))) %&gt;% hilldiv(.,q=1,tree=genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% rename(phylogenetic=1) %&gt;% rownames_to_column(var=&quot;sample&quot;) 7.3 TOP10 candidate samples #Select top10 selection &lt;- left_join(phylogenetic_diversity,microbial_fraction,by=join_by(sample==sample)) %&gt;% arrange(-phylogenetic) %&gt;% unique() %&gt;% select(sample) %&gt;% slice(1:20) %&gt;% pull() #Print statistics left_join(phylogenetic_diversity,microbial_fraction,by=join_by(sample==sample)) %&gt;% left_join(sample_metadata,by=&quot;sample&quot;) %&gt;% arrange(-phylogenetic) %&gt;% unique() %&gt;% slice(1:20) %&gt;% select(sample, phylogenetic, read_fraction, treatment, trial) %&gt;% mutate(number_of_genomes=genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,selection))) %&gt;% summarise(across(starts_with(&quot;D&quot;), ~ sum(. != 0))) %&gt;% t()) %&gt;% rename(phylogenetic_diversity=phylogenetic,microbial_fraction=read_fraction) %&gt;% tt() tinytable_e78vnbv6ahhhokj29irf .table td.tinytable_css_mm9y2h2ax4zs07to6e5k, .table th.tinytable_css_mm9y2h2ax4zs07to6e5k { border-bottom: solid 0.1em #d3d8dc; } sample phylogenetic_diversity microbial_fraction treatment trial number_of_genomes D300670 10.830700 60.88 T3 I 340 D300644 10.509730 37.41 T1 I 150 D300666 9.184970 62.57 T3 I 170 D300665 9.047756 49.03 T1 I 206 D300625 9.039263 66.57 T1 I 259 D300657 8.981349 66.28 T3 K 289 D300651 8.966840 59.94 T1 K 401 D300639 8.699889 60.57 T3 I 272 D300635 8.536139 61.39 T1 I 280 D300648 8.470311 66.89 T3 I 288 D300656 8.433429 42.48 T1 K 248 D300629 8.422548 55.78 T3 K 260 D300637 8.167404 62.95 T3 I 308 D300664 8.051396 68.78 T3 I 321 D300654 8.021459 63.11 T1 K 333 D300659 8.007220 69.24 T3 K 370 D300660 7.967956 62.56 T3 K 332 D300672 7.960063 61.17 T0 K 50 D300658 7.926715 58.91 T3 K 337 D300653 7.807393 69.50 T1 K 327 All the samples with top phylogenetic diversity metrics have similar microbial fraction. vertical_tree &lt;- force.ultrametric(genome_tree,method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% select(phylum) colors_alphabetic &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% select(colors) %&gt;% pull() vertical_tree &lt;- gheatmap(vertical_tree, phylum_colors, offset=-0.6, width=0.1, colnames=FALSE) + scale_fill_manual(values=colors_alphabetic) + new_scale_fill() #Add genome counts of d0 genome_counts_selection &lt;- genome_counts_filt %&gt;% select(all_of(c(&quot;genome&quot;,selection))) %&gt;% column_to_rownames(var=&quot;genome&quot;) %&gt;% tss() vertical_tree &lt;- gheatmap(vertical_tree, log10(genome_counts_selection), offset=-0.4, width=0.3, colnames=TRUE, colnames_angle=90, font.size=3, colnames_position=&quot;top&quot;, colnames_offset_y = 15) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;lightblue&quot;, high = &quot;#315b7d&quot;, na.value=&quot;#f4f4f4&quot;) + new_scale_fill() vertical_tree + theme(legend.position=&#39;none&#39;) Top 10 diversity samples are sorted from left to right. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
